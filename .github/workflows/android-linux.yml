name: Android-Linux

on:
  push:
    branches:
      - master
      - "Stable*"
      - fork_detached_squashed
    tags:
      - "v*"
    paths-ignore:
      - "deploy/**"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "deploy/**"
      - "docs/**"
      - ".github/workflows/docs_deploy.yml"
      - ".github/workflows/linux.yml"
      - ".github/workflows/macos.yml"
      - ".github/workflows/windows.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        BuildType: [Release]

    defaults:
      run:
        shell: bash

    env:
      ARTIFACT: QGroundControl.apk
      QT_VERSION: 6.6.3
      GST_VERSION: 1.22.12
      QT_ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/deploy/android/android_release.keystore
      QT_ANDROID_KEYSTORE_ALIAS: QGCAndroidKeyStore
      QT_ANDROID_KEYSTORE_STORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      QT_ANDROID_KEYSTORE_KEY_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      QT_ANDROID_ABIS: ${{ matrix.BuildType == 'Release' && 'armeabi-v7a;arm64-v8a' || 'arm64-v8a' }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          android: "false"
        continue-on-error: true

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0

      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install CCache
        run: |
          wget --quiet https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2-linux-x86_64.tar.xz
          tar -xvf ccache-*-linux-x86_64.tar.xz
          cd ccache-*-linux-x86_64
          sudo make install

      - name: Check CMake Installation
        run: |
          which cmake

      - name: Install Qt for Android
        uses: ./.github/actions/qt-android
        with:
          host: linux
          arch: gcc_64
          version: ${{ env.QT_VERSION }}
          abis: ${{ env.QT_ANDROID_ABIS }}

      - name: Setup QMQTT First Part
        run: |
          export QT_VERSION=6.6.3
          export QT_INSTALL_DIR=/home/runner/work/_temp/Qt
          export CMAKE_BIN_DIR=$QT_INSTALL_DIR/Tools/CMake/bin
          export QMAKE_BIN_DIR=$QT_INSTALL_DIR/$QT_VERSION/gcc_64/bin
          export CMAKE_PREFIX_PATH=$QT_INSTALL_DIR/$QT_VERSION/gcc_64
          export NINJA_DIR=$QT_INSTALL_DIR/Tools/Ninja

          git clone git://code.qt.io/qt/qtmqtt.git --branch $QT_VERSION
          cd qtmqtt
          mkdir build
          cd build/
          $QMAKE_BIN_DIR/qt-configure-module ..

          "/usr/local/bin/cmake" --build . --parallel

          mkdir -p "$QT_INSTALL_DIR/$QT_VERSION/gcc_64/lib/cmake/Qt6Mqtt"

          cp -r /usr/local/lib/cmake/Qt6Mqtt/* "$QT_INSTALL_DIR/$QT_VERSION/gcc_64/lib/cmake/Qt6Mqtt/"
      - name: mkdir dir 
      
        run: mkdir ${{ runner.temp }}/shadow_build_dir

      
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run:
          ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
          -DQT_ANDROID_ABIS="${{ env.QT_ANDROID_ABIS }}"
          -DQT_ANDROID_BUILD_ALL_ABIS=OFF
          -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../gcc_64"
          -DQT_ANDROID_SIGN_APK=${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && 'ON' || 'OFF' }}
          -DQT_DEBUG_FIND_PACKAGE=ON
          -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Check Qt Bin Directory
        run: |
          echo "Listing content of Qt bin directory..."
          ls -l $QMAKE_BIN_DIR
      - name: Build
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - run: cp ${{ runner.temp }}/shadow_build_dir/android-build/*.apk ${{ runner.temp }}/shadow_build_dir/${{ env.ARTIFACT }}

      - name: Upload Build File
        if: matrix.BuildType == 'Release'
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ env.ARTIFACT }}
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: ""
