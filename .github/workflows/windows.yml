name: Windows

on:
  push:
    branches:
      - master
      - 'Stable*'
      - detached
      - detached_squashed
      - vehicle-camera
      - gstreamer
    tags:
      - 'v*'
    paths-ignore:
      - 'android/**'
      - 'deploy/**'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'android/**'
      - 'deploy/**'
      - 'docs/**'
      - '.github/workflows/docs_deploy.yml'
      - '.github/workflows/android.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/macos.yml'

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64] # Arm64

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: QGroundControl-installer.exe
      GST_VERSION: 1.22.12
      SCCACHE_GHA_ENABLED: "true"
      QT_VERSION: 6.6.3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0

      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install Dependencies
        run: |
          choco install --no-progress ninja pkgconfiglite -y
          choco install --no-progress cmake --installargs 'ADD_CMAKE_TO_PATH=System' --apply-install-arguments-to-dependencies

      - name: Install minio dependencies
        run: |
          vcpkg install curl:x64-windows jsoncpp:x64-windows
          dir /s vcpkg.cmake

      - name: Install Vulkan
        working-directory: ${{ runner.temp }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe" -OutFile vulkan-sdk.exe
          .\vulkan-sdk.exe --root C:\VulkanSDK\latest --accept-licenses --default-answer --confirm-command install com.lunarg.vulkan.glm com.lunarg.vulkan.volk com.lunarg.vulkan.vma com.lunarg.vulkan.debug
          echo "VULKAN_SDK=C:\VulkanSDK\latest" >> $env:GITHUB_ENV

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      # - name: Install Gstreamer
      #   run: choco install --no-progress gstreamer gstreamer-devel --version=${{ env.GST_VERSION }}

      # - name: Set Up sccache
      #   uses: mozilla-actions/sccache-action@v0.0.5

      - name: Set Up Cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ matrix.Arch }}-${{ matrix.BuildType }}
          restore-keys: ${{ runner.os }}-${{ matrix.Arch }}-${{ matrix.BuildType }}
          max-size: 1G
          append-timestamp: false
          variant: sccache
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Install Qt for Windows (x64)
        if: matrix.Arch == 'x64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.*
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Install Qt for Windows (Arm64)
        if: matrix.Arch == 'Arm64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.*
          host: windows
          target: desktop
          arch: win64_msvc2019_arm64
          dir: ${{ runner.temp }}
          extra: --autodesktop
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - run: mkdir ${{ runner.temp }}\shadow_build_dir

      - name: Setup QMQTT First Part
        run: |
          set QT_VERSION=6.6.3
          set QT_INSTALL_DIR=D:/a/_temp/Qt
          set CMAKE_BIN_DIR=$QT_INSTALL_DIR/Tools/CMake/bin"
          set QMAKE_BIN_DIR=$QT_INSTALL_DIR/$QT_VERSION/msvc2019_64/bin"
          set CMAKE_PREFIX_PATH=$QT_INSTALL_DIR/$QT_VERSION/msvc2019_64/"
          set NINJA_DIR=$QT_INSTALL_DIR/Tools/Ninja"
          git clone git://code.qt.io/qt/qtmqtt.git --branch 6.6.3
          cd qtmqtt
          mkdir build
          cd build/
          D:/a/_temp/Qt/6.6.3/msvc2019_64/bin/qt-configure-module.bat ..

      - name: Setup QMQTT Second Part
        run: |
          cd D:\a\forkQGroundControl\forkQGroundControl\qtmqtt\build
          "C:\Program Files\CMake\bin\cmake" --build .
          "C:\Program Files\CMake\bin\cmake" --install . --verbose

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: |
          ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja ^
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }} ^
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}
              --debug-find-pkg=Qt6Mqtt

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Upload Build File
        if: matrix.BuildType == 'Release'
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ env.ARTIFACT }}
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: ''
